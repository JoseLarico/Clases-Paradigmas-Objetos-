{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:31:07.719Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:32:53.811Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:32:55.977Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:32:58.177Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:01.159Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:01.776Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:05.294Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:05.610Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:06.971Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:07.822Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":144,"timestamp":"2024-09-16T02:33:11.850Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":104,"timestamp":"2024-09-16T02:33:13.993Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":109,"timestamp":"2024-09-16T02:33:14.934Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":101,"timestamp":"2024-09-16T02:33:15.433Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":179,"timestamp":"2024-09-16T02:33:16.186Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:16.186Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:16.259Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":127,"timestamp":"2024-09-16T02:33:16.386Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:16.461Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:16.532Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:16.966Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":122,"timestamp":"2024-09-16T02:33:17.152Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":104,"timestamp":"2024-09-16T02:33:18.090Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:21.784Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:21.841Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":102,"timestamp":"2024-09-16T02:33:21.943Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:22.013Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":128,"timestamp":"2024-09-16T02:33:22.142Z"}
{"level":"info","message":"⌛ Building environment","timeElapsed":126,"timestamp":"2024-09-16T02:33:22.271Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":237,"timestamp":"2024-09-16T02:33:22.594Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:33:23.523Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":122,"timestamp":"2024-09-16T02:33:26.977Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:34.830Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:35.499Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:36.637Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:38.227Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:49.616Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:52.717Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:54.235Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:55.405Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:56.260Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:33:57.549Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:07.381Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:07.911Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:08.315Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:10.693Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":120,"timestamp":"2024-09-16T02:34:17.023Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":113,"timestamp":"2024-09-16T02:34:17.298Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:34:17.299Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:34:17.373Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":124,"timestamp":"2024-09-16T02:34:17.498Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:34:17.564Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:34:17.742Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":118,"timestamp":"2024-09-16T02:34:17.863Z"}
{"level":"error","message":"✘ Completions for node failed: Error: Clases.clase-2.jerry.a [Field]{e8c508} at Clases/clase-2.wlk:216 exhausted all cases without a match Clases.clase-2.jerry.a [Field]{e8c508} at Clases/clase-2.wlk:216 exhausted all cases without a match","stack":"Error: Clases.clase-2.jerry.a [Field]{e8c508} at Clases/clase-2.wlk:216 exhausted all cases without a match\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\extensions.js:85:11\n    at completionsForNode (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\node-completion.js:10:44)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\autocomplete.js:26:154\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\server.js:198:20\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-languageserver\\lib\\common\\server.js:593:20\n    at handleRequest (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:493:41)\n    at handleMessage (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:339:13)\n    at processMessageQueue (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:362:17)\n    at Immediate._onImmediate (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:334:13)\n    at process.processImmediate (node:internal/timers:478:21)","timestamp":"2024-09-16T02:34:20.944Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":106,"timestamp":"2024-09-16T02:34:21.050Z"}
{"level":"info","message":"onRequest - completionItem/resolve","timestamp":"2024-09-16T02:34:21.051Z"}
{"level":"error","message":"✘ Completions for node failed: Error: Clases.clase-2.jerry.al [Field]{57033c} at Clases/clase-2.wlk:216 exhausted all cases without a match Clases.clase-2.jerry.al [Field]{57033c} at Clases/clase-2.wlk:216 exhausted all cases without a match","stack":"Error: Clases.clase-2.jerry.al [Field]{57033c} at Clases/clase-2.wlk:216 exhausted all cases without a match\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\extensions.js:85:11\n    at completionsForNode (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\node-completion.js:10:44)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\autocomplete.js:26:154\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\server.js:198:20\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-languageserver\\lib\\common\\server.js:593:20\n    at handleRequest (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:493:41)\n    at handleMessage (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:339:13)\n    at processMessageQueue (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:362:17)\n    at Immediate._onImmediate (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:334:13)\n    at process.processImmediate (node:internal/timers:478:21)","timestamp":"2024-09-16T02:34:21.154Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":124,"timestamp":"2024-09-16T02:34:21.280Z"}
{"level":"info","message":"⌛ Building environment","timeElapsed":127,"timestamp":"2024-09-16T02:34:21.407Z"}
{"level":"error","message":"✘ Completions for node failed: Error: Clases.clase-2.jerry.alim [Field]{ccd30b} at Clases/clase-2.wlk:216 exhausted all cases without a match Clases.clase-2.jerry.alim [Field]{ccd30b} at Clases/clase-2.wlk:216 exhausted all cases without a match","stack":"Error: Clases.clase-2.jerry.alim [Field]{ccd30b} at Clases/clase-2.wlk:216 exhausted all cases without a match\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\extensions.js:85:11\n    at completionsForNode (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\node-completion.js:10:44)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\autocomplete.js:26:154\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\server.js:198:20\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-languageserver\\lib\\common\\server.js:593:20\n    at handleRequest (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:493:41)\n    at handleMessage (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:339:13)\n    at processMessageQueue (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:362:17)\n    at Immediate._onImmediate (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:334:13)\n    at process.processImmediate (node:internal/timers:478:21)","timestamp":"2024-09-16T02:34:21.525Z"}
{"level":"info","message":"⌛ Building environment","timeElapsed":124,"timestamp":"2024-09-16T02:34:21.653Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":139,"timestamp":"2024-09-16T02:34:21.793Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":132,"timestamp":"2024-09-16T02:34:21.926Z"}
{"level":"error","message":"✘ Completions for node failed: Error: Clases.clase-2.jerry.alimen [Field]{639fc5} at Clases/clase-2.wlk:216 exhausted all cases without a match Clases.clase-2.jerry.alimen [Field]{639fc5} at Clases/clase-2.wlk:216 exhausted all cases without a match","stack":"Error: Clases.clase-2.jerry.alimen [Field]{639fc5} at Clases/clase-2.wlk:216 exhausted all cases without a match\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\extensions.js:85:11\n    at completionsForNode (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\node-completion.js:10:44)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\functionalities\\autocomplete\\autocomplete.js:26:154\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\out\\server.js:198:20\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-languageserver\\lib\\common\\server.js:593:20\n    at handleRequest (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:493:41)\n    at handleMessage (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:339:13)\n    at processMessageQueue (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:362:17)\n    at Immediate._onImmediate (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\server\\node_modules\\vscode-jsonrpc\\lib\\common\\connection.js:334:13)\n    at process.processImmediate (node:internal/timers:478:21)","timestamp":"2024-09-16T02:34:22.021Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":112,"timestamp":"2024-09-16T02:34:22.134Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":114,"timestamp":"2024-09-16T02:34:27.867Z"}
{"level":"info","message":"⌛ Validating Clases/clase-2.wlk","timeElapsed":109,"timestamp":"2024-09-16T02:34:28.869Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:36.443Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:37.466Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:38.495Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:38.743Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:39.026Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:39.600Z"}
{"errors":{"errors":[null,["/* CONCEPTOS Y OTRAS COSAS\r","Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\r","modelar es lo primero en lo que tenemos que pensar\r","Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\r","al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\r","El polimorfismo es un concepto que permite que diferentes objetos puedan \r","recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \r","interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \r","En Paradigmas tenemos que saber que TODO puede ser un objeto.\r","Los metodos con efecto los reconocemos porque modifican las referencias de \r","los objetos, en cambio los de retonrno no lo hacen\r","CLAVE\r","-Si retorna -> es de pregunta/retorno\r","-Si no retorna -> es de efecto/accion\r","/* FECHAS\r","Metodos para manejar con fechas:\r","> const hoy = new Date()\r","✓\r","> hoy\r","✓ 24/11/2017\r","> hoy.plusYears(1)                 // sumo un año\r","✓ 24/11/2018                      // devuelve una nueva fecha\r","> hoy.plusMonths(2)               // sumo 2 meses\r","✓ 24/1/2018\r","> hoy.plusDays(20)\r","✓ 14/12/2017\r","> hoy.isLeapYear()                // pregunto si el año es bisiesto\r","✓ false\r","> hoy.dayOfWeek()                // qué día de la semana es\r","✓ \"friday\"\r","> hoy.month()\r","✓ 11\r","> hoy.year()\r","✓ 2017\r","> const ayer = hoy.minusDays(1)\r","✓                              // resto un día para obtener el día de ayer\r","> ayer < hoy                   // comparo fechas\r","✓ true\r","> ayer - hoy                   // comparo fechas\r","✓ -1                          // diferencia en días entre ayer y hoy\r","> const haceUnMes = hoy.minusMonths(1)\r","✓\r","> ayer.between(haceUnMes, hoy)\r","✓ true                        // ayer está entre hace un mes y hoy\r","/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\r","En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \r","bloques que nos van a ayudar a:\r","-poder generar referencias a dichos bloques\r","-pasarlos como parámetro\r","-elegir en qué momento ejecutar una porción de código\r","1) Ejemplo de bloque sin parametro\r","> const abs4 = { => 4.abs() }        \r","✓\r","> abs4\r","✓ { => 4.abs() }\r","> abs4.apply()                        Con apply() la invocamos para aplicarla\r","✓ 4\r","2) Ejemplo de bloque con parametro (se pueden parametrizar)\r",">>> const abs = { numero => numero.abs() }\r",">>\r","✓\r","> abs\r","✓ { numero => numero.abs() }\r",">>> abs.apply(-8)                     pasamos el parametro mediante el apply\r","✓ 8\r","3) Bloques con dos parámetros \t\r","> { num1, num2 => num1.max(num2) }.apply(4, 2)\r","✓ 4\r","> { num1, num2 => num1 + num2 }.apply(4, 2)\r","✓ 6\r","O bien podemos currificarlo:\r","> { num1 => { num2 => num1 + num2 }}.apply(4)\r","✓ { num2 => num1 + num2 }   // devuelve un bloque\r","> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\r","✓ 6\r","4) Contexto de los bloques\r","Un dato importante de los closures es que no solo acceden a sus parámetros, \r","sino también a cualquier otra referencia en el contexto donde fueron definidas. \r","Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\r","> var to = \"world\"\r","✓\r","> const helloWorld = { \"hello \" + to }\r","✓\r","> helloWorld.apply()      \t\t\r","✓ \"hello world\"\r","> to = \"someone else\"\r","✓\r","> helloWorld.apply()      \t\r","✓ \"hello someone else\"\r","> var num = 5\r","✓\r","> const bloque = { otroNum => num + otroNum }\r","✓\r","> bloque.apply(6)      \t\t\r","✓ 11\r","/*\r","ORDEN SUPERIOR\r","Tambien existen estas funciones que esperan bloques como parametros (retorno) \r","object x {\r","var property atributo = 3\r","method incrementar() {\r","atributo = atributo * atributo\r","}\r","}\r","object y {\r","var property atributo = 1\r","method incrementar() {\r","atributo = atributo + 1\r","}\r","}\r",">const lista = [x,y]\r","> lista.filter({objeto => objeto.atributo() >2})\r","[x]\r","> lista.map({objeto => objeto.atributo()})\r","[3,1]\r","> lista.any ({objeto => objeto.atributo() == 3})\r","true\r","Y tambien tenemos un metodo que tiene efecto \r","lista.forEach({objeto => objeto.incrementar()})\r","Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\r","/* EJERCICIO TOM Y JERRY\r","1)Primera parte\r","Necesitamos modelar en Wollok a tom que es un gato.\r","Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \r","de comer ratones y de correr. \r","La persona que registra las actividades de tom, registra los ratones que come y la cantidad \r","de tiempo que corre en segundos.\r","Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \r","gramos + 10 joules extra si el ratón está feliz.\r","La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \r","La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \r","correr, y no varía durante una carrera. \r","Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \r","Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \r","cuánto corrió, me lo dicen en segundos.\r","Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\r","Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \r","de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \r","de letras que tiene cada alimento \"pesado\" que ingirió. Los alimentos \"pesados\" son \r","los de más de 4 letras. Por ejemplo si comió \"ensalada\", \"pan\" y \"churrasco\" son \r","30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\r","Jerry está feliz si alguno de los alimentos que comió es \"pan\". \r","Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \r","quiere comer es su gato favorito Tom.\r","2) Segunda parte\r","Lograr que tom entienda el mensaje:\r","tom.meConvieneComerRatonA(unRaton, unaDistancia)\r","Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \r","la distancia, que está medida en metros.\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/* CONCEPTOS Y OTRAS COSAS\\r\",\n      \"Lo mas importante en Objetos son los MENSAJES, a la hora de empezar a\\r\",\n      \"modelar es lo primero en lo que tenemos que pensar\\r\",\n      \"Otro concepto igual de importante es el de POLIMORFISMO donde se necesitan\\r\",\n      \"al menos 3 objetos (El objeto que envia el msj y 2 objetos que lo reciben).\\r\",\n      \"El polimorfismo es un concepto que permite que diferentes objetos puedan \\r\",\n      \"recibir un mismo mensaje (mismo metodo) gracias a que comparten la misma \\r\",\n      \"interfaz aunque la implementacion de los metodos sea diferente en c/ uno. \\r\",\n      \"En Paradigmas tenemos que saber que TODO puede ser un objeto.\\r\",\n      \"Los metodos con efecto los reconocemos porque modifican las referencias de \\r\",\n      \"los objetos, en cambio los de retonrno no lo hacen\\r\",\n      \"CLAVE\\r\",\n      \"-Si retorna -> es de pregunta/retorno\\r\",\n      \"-Si no retorna -> es de efecto/accion\\r\",\n      \"/* FECHAS\\r\",\n      \"Metodos para manejar con fechas:\\r\",\n      \"> const hoy = new Date()\\r\",\n      \"✓\\r\",\n      \"> hoy\\r\",\n      \"✓ 24/11/2017\\r\",\n      \"> hoy.plusYears(1)                 // sumo un año\\r\",\n      \"✓ 24/11/2018                      // devuelve una nueva fecha\\r\",\n      \"> hoy.plusMonths(2)               // sumo 2 meses\\r\",\n      \"✓ 24/1/2018\\r\",\n      \"> hoy.plusDays(20)\\r\",\n      \"✓ 14/12/2017\\r\",\n      \"> hoy.isLeapYear()                // pregunto si el año es bisiesto\\r\",\n      \"✓ false\\r\",\n      \"> hoy.dayOfWeek()                // qué día de la semana es\\r\",\n      \"✓ \\\"friday\\\"\\r\",\n      \"> hoy.month()\\r\",\n      \"✓ 11\\r\",\n      \"> hoy.year()\\r\",\n      \"✓ 2017\\r\",\n      \"> const ayer = hoy.minusDays(1)\\r\",\n      \"✓                              // resto un día para obtener el día de ayer\\r\",\n      \"> ayer < hoy                   // comparo fechas\\r\",\n      \"✓ true\\r\",\n      \"> ayer - hoy                   // comparo fechas\\r\",\n      \"✓ -1                          // diferencia en días entre ayer y hoy\\r\",\n      \"> const haceUnMes = hoy.minusMonths(1)\\r\",\n      \"✓\\r\",\n      \"> ayer.between(haceUnMes, hoy)\\r\",\n      \"✓ true                        // ayer está entre hace un mes y hoy\\r\",\n      \"/*  LAMDA/BLOQUES/CLOSURE EN OBJETOS\\r\",\n      \"En funcional las lamda eran funciones anonimas pero aca en Objetos van a ser \\r\",\n      \"bloques que nos van a ayudar a:\\r\",\n      \"-poder generar referencias a dichos bloques\\r\",\n      \"-pasarlos como parámetro\\r\",\n      \"-elegir en qué momento ejecutar una porción de código\\r\",\n      \"1) Ejemplo de bloque sin parametro\\r\",\n      \"> const abs4 = { => 4.abs() }        \\r\",\n      \"✓\\r\",\n      \"> abs4\\r\",\n      \"✓ { => 4.abs() }\\r\",\n      \"> abs4.apply()                        Con apply() la invocamos para aplicarla\\r\",\n      \"✓ 4\\r\",\n      \"2) Ejemplo de bloque con parametro (se pueden parametrizar)\\r\",\n      \">>> const abs = { numero => numero.abs() }\\r\",\n      \">>\\r\",\n      \"✓\\r\",\n      \"> abs\\r\",\n      \"✓ { numero => numero.abs() }\\r\",\n      \">>> abs.apply(-8)                     pasamos el parametro mediante el apply\\r\",\n      \"✓ 8\\r\",\n      \"3) Bloques con dos parámetros \\t\\r\",\n      \"> { num1, num2 => num1.max(num2) }.apply(4, 2)\\r\",\n      \"✓ 4\\r\",\n      \"> { num1, num2 => num1 + num2 }.apply(4, 2)\\r\",\n      \"✓ 6\\r\",\n      \"O bien podemos currificarlo:\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4)\\r\",\n      \"✓ { num2 => num1 + num2 }   // devuelve un bloque\\r\",\n      \"> { num1 => { num2 => num1 + num2 }}.apply(4).apply(2)\\r\",\n      \"✓ 6\\r\",\n      \"4) Contexto de los bloques\\r\",\n      \"Un dato importante de los closures es que no solo acceden a sus parámetros, \\r\",\n      \"sino también a cualquier otra referencia en el contexto donde fueron definidas. \\r\",\n      \"Esto las vuelve realmente poderosas. Veamos un ejemplo muy sencillo:\\r\",\n      \"> var to = \\\"world\\\"\\r\",\n      \"✓\\r\",\n      \"> const helloWorld = { \\\"hello \\\" + to }\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\t\\r\",\n      \"✓ \\\"hello world\\\"\\r\",\n      \"> to = \\\"someone else\\\"\\r\",\n      \"✓\\r\",\n      \"> helloWorld.apply()      \\t\\r\",\n      \"✓ \\\"hello someone else\\\"\\r\",\n      \"> var num = 5\\r\",\n      \"✓\\r\",\n      \"> const bloque = { otroNum => num + otroNum }\\r\",\n      \"✓\\r\",\n      \"> bloque.apply(6)      \\t\\t\\r\",\n      \"✓ 11\\r\",\n      \"/*\\r\",\n      \"ORDEN SUPERIOR\\r\",\n      \"Tambien existen estas funciones que esperan bloques como parametros (retorno) \\r\",\n      \"object x {\\r\",\n      \"var property atributo = 3\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo * atributo\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"object y {\\r\",\n      \"var property atributo = 1\\r\",\n      \"method incrementar() {\\r\",\n      \"atributo = atributo + 1\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \">const lista = [x,y]\\r\",\n      \"> lista.filter({objeto => objeto.atributo() >2})\\r\",\n      \"[x]\\r\",\n      \"> lista.map({objeto => objeto.atributo()})\\r\",\n      \"[3,1]\\r\",\n      \"> lista.any ({objeto => objeto.atributo() == 3})\\r\",\n      \"true\\r\",\n      \"Y tambien tenemos un metodo que tiene efecto \\r\",\n      \"lista.forEach({objeto => objeto.incrementar()})\\r\",\n      \"Importante si queremos usar metodos con efecto vamos a usar forEach solamente,\\r\",\n      \"/* EJERCICIO TOM Y JERRY\\r\",\n      \"1)Primera parte\\r\",\n      \"Necesitamos modelar en Wollok a tom que es un gato.\\r\",\n      \"Lo que nos interesa de tom es manejar su energía y su velocidad, que dependen de sus actividades \\r\",\n      \"de comer ratones y de correr. \\r\",\n      \"La persona que registra las actividades de tom, registra los ratones que come y la cantidad \\r\",\n      \"de tiempo que corre en segundos.\\r\",\n      \"Cuando tom come un ratón aumenta su energía en 12 joules + el peso del ratón en \\r\",\n      \"gramos + 10 joules extra si el ratón está feliz.\\r\",\n      \"La velocidad de tom es 5 metros x segundo + (energia medida en joules / 10). \\r\",\n      \"La velocidad que se toma es la que corresponde a la energía de Tom antes de empezar a \\r\",\n      \"correr, y no varía durante una carrera. \\r\",\n      \"Cuando tom corre, su energía disminuye en (0.5 x cantidad de metros que corrió). \\r\",\n      \"Observar que la cuenta está en joules consumidos por metro, pero cuando me dicen \\r\",\n      \"cuánto corrió, me lo dicen en segundos.\\r\",\n      \"Nota: además de tom, hay otros objetos en juego, ¿cuáles son, qué mensaje tienen que entender?\\r\",\n      \"Jerry es un ratón que tiene un peso que se encuentra relacionado a la cantidad \\r\",\n      \"de cosas que comió: El peso del ratón es de 30 gramos de base + el doble de la cantidad \\r\",\n      \"de letras que tiene cada alimento \\\"pesado\\\" que ingirió. Los alimentos \\\"pesados\\\" son \\r\",\n      \"los de más de 4 letras. Por ejemplo si comió \\\"ensalada\\\", \\\"pan\\\" y \\\"churrasco\\\" son \\r\",\n      \"30 (de base) + 16 (de ensalada) + 18 (de churrasco) = 64 gr.\\r\",\n      \"Jerry está feliz si alguno de los alimentos que comió es \\\"pan\\\". \\r\",\n      \"Mickey es otro ratón que su peso es de 15 gramos y está feliz si el gato que lo \\r\",\n      \"quiere comer es su gato favorito Tom.\\r\",\n      \"2) Segunda parte\\r\",\n      \"Lograr que tom entienda el mensaje:\\r\",\n      \"tom.meConvieneComerRatonA(unRaton, unaDistancia)\\r\",\n      \"Se cumple si la energía que gana por comer al ratón es mayor a la que consume corriendo \\r\",\n      \"la distancia, que está medida en metros.\\r\"\n    ]\n  ]\n}\n    at toError (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:102:15)\n    at raise (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:108:9)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:387:35\n    at Monad.apply (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:242:10)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\partial.lenses.validation\\dist\\partial.lenses.validation.cjs.js:386:16)\n    at intersperse (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\infestines\\dist\\infestines.cjs.js:73:14)\n    at splitMetadata (c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:354:134)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:28:22\n    at Array.map (<anonymous>)\n    at c:\\Users\\Jose\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.3.4\\node_modules\\wollok-ts\\dist\\printer\\print.js:33:286","timestamp":"2024-09-16T02:34:39.978Z"}
